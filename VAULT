//SPDX-License-Identifier:MIT
pragma solidity>=0.8.4;

contract vault{
    address public owner;
    struct locker{
        uint256 value;
        uint256 time_locked;
    }
    uint counter=0;
    mapping (uint=>locker) public Vault;
    //modifiers
    modifier onlyowner(){
        require(msg.sender==owner,"can't touch it");
        _;
    }
    constructor(){
        owner=msg.sender;
    }
    //function
    function deposit(uint _time)
    public 
    payable 
    onlyowner
    {
       counter+=1;
       Vault[counter].time_locked=_time;
       Vault[counter].value=msg.value;
    }

    function withdraw(uint _lockerNumber)
    public
    onlyowner{
        require(block.timestamp>=Vault[_lockerNumber].time_locked,"come back later");
        payable(owner).transfer(Vault[_lockerNumber].value);
             
    }
   
}
